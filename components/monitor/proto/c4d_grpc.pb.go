//syntax = "proto3";
//
//package c4d;
//
//option go_package = "./;c4d";
//
//message CCLOperation {
//  string op_type = 1;
//  string algorithm = 2;
//  string data_type = 3;
//  int64 count = 4;
//  int64 root_rank = 5;
//  int64 context_rank = 6;
//  int64 context_size = 7;
//  int64 start_time = 8;
//  int64 end_time = 9;
//  string filename = 10;
//  bool finished = 11;
//  int64 remote_rank = 12;
//  int64 bytes = 13;
//  double timestamp = 14;
//}
//
//message CCLLogGroup {
//  string op_type = 1;
//  repeated CCLOperation logs = 2;
//}
//
//message RankLatencies {
//  int32 rank = 1;
//  map<int32, double> avg_latencies = 2;  // remoteRank -> averaged latency
//}
//
//message NodeStatus {
//  bool is_alive = 1;
//  int64 process_id = 2;
//}
//
//message Metrics {
//  double ram_usage = 1;
//  double cpu_usage = 2;
//  RankLatencies rank_latencies = 3;
//}
//
//
//message AgentStatus {
//  string current_status = 1;
//  int64 current_pid = 2;
//  ProcessExecution last_execution = 3;
//}
//
//message ProcessExecution {
//  int64 start_time = 1;
//  int64 end_time = 2;
//  int32 exit_code = 3;
//  string exit_signal = 4;
//  int64 pid = 5;
//  map<string, string> env_vars = 6;
//  string script_path = 7;
//}
//
//message AgentMetrics {
//  int64 timestamp = 1;
//  SystemMetrics system_metrics = 2;
//  ProcessMetrics process_metrics = 3;
//  DerivedMetrics derived_metrics = 4;
//}
//
//message SystemMetrics {
//  double system_cpu_usage = 1;
//  int64 system_memory_total_bytes = 2;
//  int64 system_memory_used_bytes = 3;
//  int64 system_memory_free_bytes = 4;
//  int64 system_memory_available_bytes = 5;
//  int64 system_swap_total_bytes = 6;
//  int64 system_swap_used_bytes = 7;
//  int64 system_swap_free_bytes = 8;
//  double system_load_average_1m = 9;
//  double system_load_average_5m = 10;
//  double system_load_average_15m = 11;
//  int64 system_uptime_secs = 12;
//  int32 total_processes = 13;
//  int32 cpu_cores = 14;
//  int32 cpu_threads = 15;
//}
//
//message ProcessMetrics {
//  int64 pid = 1;
//  double cpu_usage = 2;
//  int64 memory_bytes = 3;
//  int64 virtual_memory_bytes = 4;
//  int64 run_time_secs = 5;
//  int64 disk_read_bytes = 6;
//  int64 disk_written_bytes = 7;
//  int32 threads = 8;
//  string status = 9;
//  string name = 10;
//  int64 parent_pid = 11;
//}
//
//message DerivedMetrics {
//  double memory_usage_percent = 1;
//  double swap_usage_percent = 2;
//  double memory_available_percent = 3;
//}
//
//message RegisterRequest {
//  string node_id = 1;
//  string node_url = 2;
//  string node_status = 3;
//}
//
//message RegisterResponse {
//  string message = 1;
//  string node_id = 2;
//}
//
//
//
//message MetricsRequest {
//  string node_id = 1;
//  Metrics metrics = 2;
//  NodeStatus status = 3;
//}
//
//message MetricsResponse {
//  string message = 1;
//}
//
//message NodeMetrics {
//  repeated double latency = 1;
//  repeated double memory_usage = 2;
//  string node_url = 3;
//  map<string, CCLLogGroup> ccl_logs = 4;
//}
//
//message AggregatedMetrics {
//  int32 total_nodes = 1;
//  double average_latency = 2;
//  double average_memory_usage = 3;
//  map<string, double> failure_probabilities = 4;
//}
//
//message FailureProbabilities {
//  map<string, double> failure_probabilities = 1;
//}
//
//service C4DService {
//  rpc Register (RegisterRequest) returns (RegisterResponse) {}
//  rpc SendMetrics (MetricsRequest) returns (MetricsResponse) {}
//}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: c4d.proto

package c4d

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	C4DService_Register_FullMethodName      = "/c4d.C4DService/Register"
	C4DService_SendMetrics_FullMethodName   = "/c4d.C4DService/SendMetrics"
	C4DService_SendHeartbeat_FullMethodName = "/c4d.C4DService/SendHeartbeat"
	C4DService_NotifyFailure_FullMethodName = "/c4d.C4DService/NotifyFailure"
)

// C4DServiceClient is the client API for C4DService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type C4DServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	SendMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
	SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	NotifyFailure(ctx context.Context, in *FailureNotificationRequest, opts ...grpc.CallOption) (*FailureNotificationResponse, error)
}

type c4DServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewC4DServiceClient(cc grpc.ClientConnInterface) C4DServiceClient {
	return &c4DServiceClient{cc}
}

func (c *c4DServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, C4DService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *c4DServiceClient) SendMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, C4DService_SendMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *c4DServiceClient) SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, C4DService_SendHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *c4DServiceClient) NotifyFailure(ctx context.Context, in *FailureNotificationRequest, opts ...grpc.CallOption) (*FailureNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FailureNotificationResponse)
	err := c.cc.Invoke(ctx, C4DService_NotifyFailure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// C4DServiceServer is the server API for C4DService service.
// All implementations must embed UnimplementedC4DServiceServer
// for forward compatibility.
type C4DServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	SendMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error)
	SendHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	NotifyFailure(context.Context, *FailureNotificationRequest) (*FailureNotificationResponse, error)
	mustEmbedUnimplementedC4DServiceServer()
}

// UnimplementedC4DServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedC4DServiceServer struct{}

func (UnimplementedC4DServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedC4DServiceServer) SendMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMetrics not implemented")
}
func (UnimplementedC4DServiceServer) SendHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHeartbeat not implemented")
}
func (UnimplementedC4DServiceServer) NotifyFailure(context.Context, *FailureNotificationRequest) (*FailureNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyFailure not implemented")
}
func (UnimplementedC4DServiceServer) mustEmbedUnimplementedC4DServiceServer() {}
func (UnimplementedC4DServiceServer) testEmbeddedByValue()                    {}

// UnsafeC4DServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to C4DServiceServer will
// result in compilation errors.
type UnsafeC4DServiceServer interface {
	mustEmbedUnimplementedC4DServiceServer()
}

func RegisterC4DServiceServer(s grpc.ServiceRegistrar, srv C4DServiceServer) {
	// If the following call pancis, it indicates UnimplementedC4DServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&C4DService_ServiceDesc, srv)
}

func _C4DService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(C4DServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: C4DService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(C4DServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _C4DService_SendMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(C4DServiceServer).SendMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: C4DService_SendMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(C4DServiceServer).SendMetrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _C4DService_SendHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(C4DServiceServer).SendHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: C4DService_SendHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(C4DServiceServer).SendHeartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _C4DService_NotifyFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailureNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(C4DServiceServer).NotifyFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: C4DService_NotifyFailure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(C4DServiceServer).NotifyFailure(ctx, req.(*FailureNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// C4DService_ServiceDesc is the grpc.ServiceDesc for C4DService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var C4DService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c4d.C4DService",
	HandlerType: (*C4DServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _C4DService_Register_Handler,
		},
		{
			MethodName: "SendMetrics",
			Handler:    _C4DService_SendMetrics_Handler,
		},
		{
			MethodName: "SendHeartbeat",
			Handler:    _C4DService_SendHeartbeat_Handler,
		},
		{
			MethodName: "NotifyFailure",
			Handler:    _C4DService_NotifyFailure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c4d.proto",
}
